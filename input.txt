terminals: (rule: the first character represents 'epsilon', the second char represents 'int' if exists otherwise keep anything, the last character represents 'end of string' )
e i ( ) * + $
non terminals: (rule: the first character represents start symbol )
E T A B F
E>TA
A>+TA|e
T>FB
B>*FB|e
F>(E)|i

failing to follow the rules above leads to undefined behavior. 
modify the 2nd line for terminals. Don't change lines structure.
2ND LINE - TERMINALS
4TH LINE - NON-TERMINALS
5TH LINE ONWARDS - PRODUCTION RULES
the other lines will be ignored by the parser
